// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: client.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RiderMetrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The most recently acquired value of the rider's power output, whether from
  /// an on-bike powermeter or from a smart trainer
  /// Units: Watts
  var power: UInt32 = 0

  var cadence: UInt32 {
    get {return _cadence ?? 0}
    set {_cadence = newValue}
  }
  /// Returns true if `cadence` has been explicitly set.
  var hasCadence: Bool {return self._cadence != nil}
  /// Clears the value of `cadence`. Subsequent reads from it will return its default value.
  mutating func clearCadence() {self._cadence = nil}

  /// The most recent heart-rate reading available for the rider
  /// Units: beats per minute
  var heartrate: UInt32 = 0

  /// The current amount of steering input, where 0 is straight ahead,
  /// negative values are left-of-center and positive values are right-of-center
  /// Units: scaled from -1 to +1
  var steering: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cadence: UInt32? = nil
}

struct ClientUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var metrics: RiderMetrics {
    get {return _metrics ?? RiderMetrics()}
    set {_metrics = newValue}
  }
  /// Returns true if `metrics` has been explicitly set.
  var hasMetrics: Bool {return self._metrics != nil}
  /// Clears the value of `metrics`. Subsequent reads from it will return its default value.
  mutating func clearMetrics() {self._metrics = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _metrics: RiderMetrics? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RiderMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RiderMetrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "power"),
    2: .same(proto: "cadence"),
    3: .same(proto: "heartrate"),
    4: .same(proto: "steering"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.power)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._cadence)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.heartrate)
      case 4: try decoder.decodeSingularFloatField(value: &self.steering)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.power != 0 {
      try visitor.visitSingularUInt32Field(value: self.power, fieldNumber: 1)
    }
    if let v = self._cadence {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if self.heartrate != 0 {
      try visitor.visitSingularUInt32Field(value: self.heartrate, fieldNumber: 3)
    }
    if self.steering != 0 {
      try visitor.visitSingularFloatField(value: self.steering, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RiderMetrics, rhs: RiderMetrics) -> Bool {
    if lhs.power != rhs.power {return false}
    if lhs._cadence != rhs._cadence {return false}
    if lhs.heartrate != rhs.heartrate {return false}
    if lhs.steering != rhs.steering {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClientUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClientUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "metrics"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._metrics)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._metrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ClientUpdate, rhs: ClientUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._metrics != rhs._metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
