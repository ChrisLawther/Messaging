// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StartEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var type: StartEvent.EventType = .xco

  var startTime: UInt64 = 0

  var riderLimit: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EventType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case xco // = 0
    case xcc // = 1
    case fourx // = 2
    case enduro // = 3
    case cyclox // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .xco
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .xco
      case 1: self = .xcc
      case 2: self = .fourx
      case 3: self = .enduro
      case 4: self = .cyclox
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .xco: return 0
      case .xcc: return 1
      case .fourx: return 2
      case .enduro: return 3
      case .cyclox: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension StartEvent.EventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [StartEvent.EventType] = [
    .xco,
    .xcc,
    .fourx,
    .enduro,
    .cyclox,
  ]
}

#endif  // swift(>=4.2)

struct Terminate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var immediate: Bool = false

  var timeout: UInt64 {
    get {return _timeout ?? 0}
    set {_timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  var hasTimeout: Bool {return self._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  mutating func clearTimeout() {self._timeout = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeout: UInt64? = nil
}

struct EventStarted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventUuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventStateChanged {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventUuid: String = String()

  var state: EventStateChanged.EventState = .created

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EventState: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case created // = 0
    case errored // = 1
    case started // = 2
    case full // = 3
    case completed // = 4
    case timedout // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .created
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .created
      case 1: self = .errored
      case 2: self = .started
      case 3: self = .full
      case 4: self = .completed
      case 5: self = .timedout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .created: return 0
      case .errored: return 1
      case .started: return 2
      case .full: return 3
      case .completed: return 4
      case .timedout: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension EventStateChanged.EventState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [EventStateChanged.EventState] = [
    .created,
    .errored,
    .started,
    .full,
    .completed,
    .timedout,
  ]
}

#endif  // swift(>=4.2)

struct AddRider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventUuid: String = String()

  var riderUuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct JoinEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventUuid: String = String()

  var riderUuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EventJoinResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventUuid: String = String()

  var joinResult: EventJoinResult.JoinResult = .joined

  var riderEventUuid: String {
    get {return _riderEventUuid ?? String()}
    set {_riderEventUuid = newValue}
  }
  /// Returns true if `riderEventUuid` has been explicitly set.
  var hasRiderEventUuid: Bool {return self._riderEventUuid != nil}
  /// Clears the value of `riderEventUuid`. Subsequent reads from it will return its default value.
  mutating func clearRiderEventUuid() {self._riderEventUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum JoinResult: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case joined // = 0
    case alreadyfull // = 1
    case unexpectedrider // = 2
    case errored // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .joined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .joined
      case 1: self = .alreadyfull
      case 2: self = .unexpectedrider
      case 3: self = .errored
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .joined: return 0
      case .alreadyfull: return 1
      case .unexpectedrider: return 2
      case .errored: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _riderEventUuid: String? = nil
}

#if swift(>=4.2)

extension EventJoinResult.JoinResult: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [EventJoinResult.JoinResult] = [
    .joined,
    .alreadyfull,
    .unexpectedrider,
    .errored,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension StartEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StartEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "type"),
    3: .same(proto: "startTime"),
    4: .same(proto: "riderLimit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.startTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.riderLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.type != .xco {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.startTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.startTime, fieldNumber: 3)
    }
    if self.riderLimit != 0 {
      try visitor.visitSingularUInt32Field(value: self.riderLimit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StartEvent, rhs: StartEvent) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.riderLimit != rhs.riderLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StartEvent.EventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "XCO"),
    1: .same(proto: "XCC"),
    2: .same(proto: "FOURX"),
    3: .same(proto: "ENDURO"),
    4: .same(proto: "CYCLOX"),
  ]
}

extension Terminate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Terminate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "immediate"),
    2: .same(proto: "timeout"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.immediate) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._timeout) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.immediate != false {
      try visitor.visitSingularBoolField(value: self.immediate, fieldNumber: 1)
    }
    try { if let v = self._timeout {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Terminate, rhs: Terminate) -> Bool {
    if lhs.immediate != rhs.immediate {return false}
    if lhs._timeout != rhs._timeout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventStarted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eventUuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventUuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.eventUuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EventStarted, rhs: EventStarted) -> Bool {
    if lhs.eventUuid != rhs.eventUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStateChanged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventStateChanged"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eventUuid"),
    2: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventUuid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.eventUuid, fieldNumber: 1)
    }
    if self.state != .created {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EventStateChanged, rhs: EventStateChanged) -> Bool {
    if lhs.eventUuid != rhs.eventUuid {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStateChanged.EventState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREATED"),
    1: .same(proto: "ERRORED"),
    2: .same(proto: "STARTED"),
    3: .same(proto: "FULL"),
    4: .same(proto: "COMPLETED"),
    5: .same(proto: "TIMEDOUT"),
  ]
}

extension AddRider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AddRider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eventUuid"),
    2: .same(proto: "riderUuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventUuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.riderUuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.eventUuid, fieldNumber: 1)
    }
    if !self.riderUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.riderUuid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AddRider, rhs: AddRider) -> Bool {
    if lhs.eventUuid != rhs.eventUuid {return false}
    if lhs.riderUuid != rhs.riderUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JoinEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JoinEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eventUuid"),
    2: .same(proto: "riderUuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventUuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.riderUuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.eventUuid, fieldNumber: 1)
    }
    if !self.riderUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.riderUuid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JoinEvent, rhs: JoinEvent) -> Bool {
    if lhs.eventUuid != rhs.eventUuid {return false}
    if lhs.riderUuid != rhs.riderUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventJoinResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventJoinResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eventUuid"),
    2: .same(proto: "joinResult"),
    3: .same(proto: "riderEventUuid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventUuid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.joinResult) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._riderEventUuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.eventUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.eventUuid, fieldNumber: 1)
    }
    if self.joinResult != .joined {
      try visitor.visitSingularEnumField(value: self.joinResult, fieldNumber: 2)
    }
    try { if let v = self._riderEventUuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EventJoinResult, rhs: EventJoinResult) -> Bool {
    if lhs.eventUuid != rhs.eventUuid {return false}
    if lhs.joinResult != rhs.joinResult {return false}
    if lhs._riderEventUuid != rhs._riderEventUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventJoinResult.JoinResult: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOINED"),
    1: .same(proto: "ALREADYFULL"),
    2: .same(proto: "UNEXPECTEDRIDER"),
    3: .same(proto: "ERRORED"),
  ]
}
