// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: server.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Vector3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Double = 0

  var y: Double = 0

  var z: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vector4 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Double = 0

  var y: Double = 0

  var z: Double = 0

  var w: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RiderState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifies the rider being described
  var riderID: String = String()

  /// The rider's position in space
  /// Units: metres
  var position: Vector3 {
    get {return _position ?? Vector3()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  /// The rider's velocity
  /// Units: m/s
  var velocity: Vector3 {
    get {return _velocity ?? Vector3()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  mutating func clearVelocity() {self._velocity = nil}

  /// The rider's pitch/roll/yaw
  /// Units: radians(?)
  var rotation: Vector4 {
    get {return _rotation ?? Vector4()}
    set {_rotation = newValue}
  }
  /// Returns true if `rotation` has been explicitly set.
  var hasRotation: Bool {return self._rotation != nil}
  /// Clears the value of `rotation`. Subsequent reads from it will return its default value.
  mutating func clearRotation() {self._rotation = nil}

  /// Description of the rider's state. Note: these values aren't necessarily those
  /// reported, but are instead used to influence on-screen appearance
  var metrics: RiderMetrics {
    get {return _metrics ?? RiderMetrics()}
    set {_metrics = newValue}
  }
  /// Returns true if `metrics` has been explicitly set.
  var hasMetrics: Bool {return self._metrics != nil}
  /// Clears the value of `metrics`. Subsequent reads from it will return its default value.
  mutating func clearMetrics() {self._metrics = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Vector3? = nil
  fileprivate var _velocity: Vector3? = nil
  fileprivate var _rotation: Vector4? = nil
  fileprivate var _metrics: RiderMetrics? = nil
}

struct Progress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lapsCompleted: UInt32 = 0

  var lapsTotal: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Duration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeRemaining: UInt32 = 0

  var totalDuration: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Sent to subscribers to an event every $interval, to describe the world state
/// that they should interpolate towards
struct EventUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The event to which the update pertains
  var eventID: String = String()

  /// Either a lap or time-based measure of race/event progress 
  var progress: Progress {
    get {return _progress ?? Progress()}
    set {_progress = newValue}
  }
  /// Returns true if `progress` has been explicitly set.
  var hasProgress: Bool {return self._progress != nil}
  /// Clears the value of `progress`. Subsequent reads from it will return its default value.
  mutating func clearProgress() {self._progress = nil}

  var duration: Duration {
    get {return _duration ?? Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  /// The new state of every rider in the event
  var riders: [RiderState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _progress: Progress? = nil
  fileprivate var _duration: Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Vector3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Vector3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.x)
      case 2: try decoder.decodeSingularDoubleField(value: &self.y)
      case 3: try decoder.decodeSingularDoubleField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vector3, rhs: Vector3) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vector4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Vector4"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    4: .same(proto: "w"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.x)
      case 2: try decoder.decodeSingularDoubleField(value: &self.y)
      case 3: try decoder.decodeSingularDoubleField(value: &self.z)
      case 4: try decoder.decodeSingularDoubleField(value: &self.w)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    if self.w != 0 {
      try visitor.visitSingularDoubleField(value: self.w, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vector4, rhs: Vector4) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.w != rhs.w {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RiderState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RiderState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "riderId"),
    2: .same(proto: "position"),
    3: .same(proto: "velocity"),
    4: .same(proto: "rotation"),
    5: .same(proto: "metrics"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.riderID)
      case 2: try decoder.decodeSingularMessageField(value: &self._position)
      case 3: try decoder.decodeSingularMessageField(value: &self._velocity)
      case 4: try decoder.decodeSingularMessageField(value: &self._rotation)
      case 5: try decoder.decodeSingularMessageField(value: &self._metrics)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.riderID.isEmpty {
      try visitor.visitSingularStringField(value: self.riderID, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._rotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._metrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RiderState, rhs: RiderState) -> Bool {
    if lhs.riderID != rhs.riderID {return false}
    if lhs._position != rhs._position {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs._rotation != rhs._rotation {return false}
    if lhs._metrics != rhs._metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Progress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Progress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lapsCompleted"),
    2: .same(proto: "lapsTotal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.lapsCompleted)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.lapsTotal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lapsCompleted != 0 {
      try visitor.visitSingularUInt32Field(value: self.lapsCompleted, fieldNumber: 1)
    }
    if self.lapsTotal != 0 {
      try visitor.visitSingularUInt32Field(value: self.lapsTotal, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Progress, rhs: Progress) -> Bool {
    if lhs.lapsCompleted != rhs.lapsCompleted {return false}
    if lhs.lapsTotal != rhs.lapsTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Duration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Duration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timeRemaining"),
    2: .same(proto: "totalDuration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.timeRemaining)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.totalDuration)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timeRemaining != 0 {
      try visitor.visitSingularUInt32Field(value: self.timeRemaining, fieldNumber: 1)
    }
    if self.totalDuration != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalDuration, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Duration, rhs: Duration) -> Bool {
    if lhs.timeRemaining != rhs.timeRemaining {return false}
    if lhs.totalDuration != rhs.totalDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EventUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eventId"),
    2: .same(proto: "progress"),
    3: .same(proto: "duration"),
    4: .same(proto: "riders"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.eventID)
      case 2: try decoder.decodeSingularMessageField(value: &self._progress)
      case 3: try decoder.decodeSingularMessageField(value: &self._duration)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.riders)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 1)
    }
    if let v = self._progress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.riders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.riders, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EventUpdate, rhs: EventUpdate) -> Bool {
    if lhs.eventID != rhs.eventID {return false}
    if lhs._progress != rhs._progress {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.riders != rhs.riders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
